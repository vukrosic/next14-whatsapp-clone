// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Thank you 'Code With Antonio' for open-sourcing this template

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  firstName      String?
  lastName       String?
  username       String   @unique
  phoneNumber    String   @unique
  statusImageUrl String?
  about          String?
  externalUserId String   @unique
  hashedPassword String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  conversationIds String[]       @db.ObjectId
  conversations   Conversation[] @relation(fields: [conversationIds], references: [id])

  seenMessageIds String[]  @db.ObjectId
  seenMessages   Message[] @relation("Seen", fields: [seenMessageIds], references: [id])

  messages Message[]

  followedBy    User[]   @relation("UserFollows", fields: [followedByIDs], references: [id])
  followedByIDs String[] @db.ObjectId
  following     User[]   @relation("UserFollows", fields: [followingIDs], references: [id])
  followingIDs  String[] @db.ObjectId

  communityIds String[]    @db.ObjectId
  Communities  Community[] @relation(fields: [communityIds], references: [id])
}

model Community {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())

  membersIds String[] @db.ObjectId
  members    User[]   @relation(fields: [membersIds], references: [id])

  conversationIds String[]       @db.ObjectId
  Conversations   Conversation[] @relation(fields: [conversationIds], references: [id])
}

model Conversation {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt       DateTime @default(now())
  lastMessageAt   DateTime @default(now())
  name            String?
  description     String?
  profileImageUrl String?
  isGroup         Boolean?
  isChannel       Boolean?

  messagesIds String[]  @db.ObjectId
  messages    Message[]

  ownerId String @db.ObjectId

  userIds String[] @db.ObjectId
  users   User[]   @relation(fields: [userIds], references: [id])

  Community   Community[] @relation(fields: [communityId], references: [id])
  communityId String[]    @db.ObjectId
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String?
  image     String?
  createdAt DateTime @default(now())

  seenIds String[] @db.ObjectId
  seen    User[]   @relation("Seen", fields: [seenIds], references: [id])

  conversationId String       @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  senderId String @db.ObjectId
  sender   User   @relation(fields: [senderId], references: [id], onDelete: Cascade)
}
